name: Maintenance

on:
  schedule:
    - cron: '0 7 * * 1' # Every Monday at 7 AM
  workflow_dispatch:

jobs:
  maintenance:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for outdated dependencies
        run: |
          echo "## Dependency Maintenance Report" > maintenance-report.md
          echo "" >> maintenance-report.md
          echo "**Maintenance Date:** $(date)" >> maintenance-report.md
          echo "**Branch:** ${{ github.ref }}" >> maintenance-report.md
          echo "" >> maintenance-report.md
          
          echo "### 📦 Dependency Status" >> maintenance-report.md
          echo "" >> maintenance-report.md
          
          # Check for outdated dependencies
          outdated_output=$(npm outdated --depth=0 2>/dev/null || echo "All dependencies are up to date")
          echo "**Outdated Dependencies:**" >> maintenance-report.md
          echo "\`\`\`" >> maintenance-report.md
          echo "$outdated_output" >> maintenance-report.md
          echo "\`\`\`" >> maintenance-report.md
          echo "" >> maintenance-report.md
          
          # Check for security vulnerabilities
          echo "### 🔒 Security Check" >> maintenance-report.md
          echo "" >> maintenance-report.md
          audit_output=$(npm audit --audit-level=moderate 2>&1 || echo "No security vulnerabilities found")
          echo "**Security Audit:**" >> maintenance-report.md
          echo "\`\`\`" >> maintenance-report.md
          echo "$audit_output" >> maintenance-report.md
          echo "\`\`\`" >> maintenance-report.md
          echo "" >> maintenance-report.md

      - name: Check project structure
        run: |
          echo "### 📁 Project Structure Check" >> maintenance-report.md
          echo "" >> maintenance-report.md
          
          # Check for missing files
          echo "**Required Files:**" >> maintenance-report.md
          required_files=("README.md" "package.json" "tsconfig.json" "vite.config.ts" "LICENSE")
          for file in "${required_files[@]}"; do
            if [ -f "$file" ]; then
              echo "- ✅ $file exists" >> maintenance-report.md
            else
              echo "- ❌ $file missing" >> maintenance-report.md
            fi
          done
          echo "" >> maintenance-report.md
          
          # Check for required directories
          echo "**Required Directories:**" >> maintenance-report.md
          required_dirs=("src" "src/components" "public")
          for dir in "${required_dirs[@]}"; do
            if [ -d "$dir" ]; then
              echo "- ✅ $dir exists" >> maintenance-report.md
            else
              echo "- ❌ $dir missing" >> maintenance-report.md
            fi
          done
          echo "" >> maintenance-report.md
          
          # Check for component files
          echo "**Component Files:**" >> maintenance-report.md
          components=("DOMExamples.tsx" "EventHandling.tsx" "FunctionalProgramming.tsx" "APIIntegration.tsx" "Widgets2D.tsx" "TypeScriptExamples.tsx")
          for component in "${components[@]}"; do
            if [ -f "src/components/$component" ]; then
              echo "- ✅ $component exists" >> maintenance-report.md
            else
              echo "- ❌ $component missing" >> maintenance-report.md
            fi
          done
          echo "" >> maintenance-report.md

      - name: Check educational content
        run: |
          echo "### 🎓 Educational Content Check" >> maintenance-report.md
          echo "" >> maintenance-report.md
          
          # Check for comments in components
          echo "**Documentation Quality:**" >> maintenance-report.md
          total_comments=0
          total_lines=0
          
          for file in src/components/*.tsx; do
            if [ -f "$file" ]; then
              component_name=$(basename "$file" .tsx)
              comment_count=$(grep -c "//" "$file" || echo "0")
              line_count=$(wc -l < "$file")
              total_comments=$((total_comments + comment_count))
              total_lines=$((total_lines + line_count))
              
              comment_ratio=$((comment_count * 100 / line_count))
              if [ "$comment_ratio" -gt 10 ]; then
                echo "- ✅ $component_name: Well documented (${comment_ratio}%)" >> maintenance-report.md
              elif [ "$comment_ratio" -gt 5 ]; then
                echo "- ⚠️ $component_name: Could use more comments (${comment_ratio}%)" >> maintenance-report.md
              else
                echo "- ❌ $component_name: Needs more documentation (${comment_ratio}%)" >> maintenance-report.md
              fi
            fi
          done
          
          overall_ratio=$((total_comments * 100 / total_lines))
          echo "" >> maintenance-report.md
          echo "**Overall Documentation:** ${overall_ratio}% comment ratio" >> maintenance-report.md
          echo "" >> maintenance-report.md

      - name: Generate maintenance recommendations
        run: |
          echo "### 🎯 Maintenance Recommendations" >> maintenance-report.md
          echo "" >> maintenance-report.md
          
          # Check if there are outdated dependencies
          if npm outdated --depth=0 >/dev/null 2>&1; then
            echo "- 🔄 **Update Dependencies:** Consider updating outdated packages" >> maintenance-report.md
          else
            echo "- ✅ **Dependencies:** All packages are up to date" >> maintenance-report.md
          fi
          
          # Check for security issues
          if npm audit --audit-level=moderate >/dev/null 2>&1; then
            echo "- ✅ **Security:** No critical vulnerabilities found" >> maintenance-report.md
          else
            echo "- 🔒 **Security:** Review and fix security vulnerabilities" >> maintenance-report.md
          fi
          
          # Check documentation quality
          total_comments=$(grep -r "//" src/ | wc -l)
          total_lines=$(find src/ -name "*.tsx" -exec wc -l {} + | tail -1 | awk '{print $1}')
          comment_ratio=$((total_comments * 100 / total_lines))
          
          if [ "$comment_ratio" -gt 10 ]; then
            echo "- ✅ **Documentation:** Good comment coverage" >> maintenance-report.md
          else
            echo "- 📝 **Documentation:** Consider adding more code comments" >> maintenance-report.md
          fi
          
          echo "- 🧹 **Cleanup:** Run cleanup workflow if needed" >> maintenance-report.md
          echo "- 📊 **Analytics:** Review project analytics for insights" >> maintenance-report.md
          echo "" >> maintenance-report.md
          
          echo "### 📅 Next Maintenance" >> maintenance-report.md
          echo "Scheduled for next Monday at 7 AM" >> maintenance-report.md

      - name: Upload maintenance report
        uses: actions/upload-artifact@v3
        with:
          name: maintenance-report
          path: maintenance-report.md
          retention-days: 30
