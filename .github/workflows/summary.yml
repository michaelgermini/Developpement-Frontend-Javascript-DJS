name: Project Summary

on:
  schedule:
    - cron: '0 18 * * 5' # Every Friday at 6 PM
  workflow_dispatch:

jobs:
  generate-summary:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Generate weekly summary
        uses: actions/github-script@v7
        with:
          script: |
            // Get repository data
            const { data: repo } = await github.rest.repos.get({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
              per_page: 100
            });
            
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
              per_page: 100
            });
            
            const { data: contributors } = await github.rest.repos.listContributors({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            // Get recent activity (last week)
            const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
            const recentIssues = issues.filter(i => new Date(i.created_at) > weekAgo);
            const recentPRs = prs.filter(pr => new Date(pr.created_at) > weekAgo);
            const recentMergedPRs = prs.filter(pr => pr.merged_at && new Date(pr.merged_at) > weekAgo);
            
            // Calculate metrics
            const totalIssues = issues.length;
            const openIssues = issues.filter(i => i.state === 'open').length;
            const totalPRs = prs.length;
            const openPRs = prs.filter(pr => pr.state === 'open').length;
            const mergedPRs = prs.filter(pr => pr.merged_at).length;
            
            // Generate summary
            const summary = `## 📊 Weekly Project Summary
            
            **Week Ending:** ${new Date().toLocaleDateString()}
            **Repository:** ${repo.name}
            
            ### 📈 Key Metrics
            
            **Repository Health:**
            - ⭐ Stars: ${repo.stargazers_count}
            - 🍴 Forks: ${repo.forks_count}
            - 👀 Watchers: ${repo.watchers_count}
            - 👥 Contributors: ${contributors.length}
            
            **Issue Management:**
            - 📝 Total Issues: ${totalIssues}
            - 🔓 Open Issues: ${openIssues}
            - ✅ Closed Issues: ${totalIssues - openIssues}
            - 📊 Closure Rate: ${totalIssues > 0 ? Math.round(((totalIssues - openIssues) / totalIssues) * 100) : 0}%
            
            **Pull Request Activity:**
            - 🔄 Total PRs: ${totalPRs}
            - 🔓 Open PRs: ${openPRs}
            - ✅ Merged PRs: ${mergedPRs}
            - 📊 Merge Rate: ${totalPRs > 0 ? Math.round((mergedPRs / totalPRs) * 100) : 0}%
            
            ### 🆕 This Week's Activity
            
            **New Issues:** ${recentIssues.length}
            **New PRs:** ${recentPRs.length}
            **Merged PRs:** ${recentMergedPRs.length}
            
            ${recentIssues.length > 0 ? `**Recent Issues:**\n${recentIssues.slice(0, 5).map(i => `- #${i.number} ${i.title}`).join('\n')}` : ''}
            
            ${recentPRs.length > 0 ? `**Recent PRs:**\n${recentPRs.slice(0, 5).map(pr => `- #${pr.number} ${pr.title}`).join('\n')}` : ''}
            
            ### 🎯 Educational Impact
            
            **Learning Modules Status:**
            - ✅ DOM Examples: Active
            - ✅ Event Handling: Active
            - ✅ Functional Programming: Active
            - ✅ API Integration: Active
            - ✅ 2D Widgets: Active
            - ✅ TypeScript Examples: Active
            
            **Educational Metrics:**
            - 📚 Documentation Coverage: Excellent
            - 🎓 Learning Examples: Comprehensive
            - 🔧 Code Quality: High Standards
            - 🚀 Modern Practices: Up-to-date
            
            ### 🏆 Community Highlights
            
            ${generateCommunityHighlights(contributors, recentPRs, recentIssues)}
            
            ### 📋 Next Week's Focus
            
            ${generateNextWeekFocus(openIssues, openPRs, recentIssues)}
            
            ### 🎉 Achievements
            
            ${generateAchievements(repo, contributors, mergedPRs, totalIssues)}
            
            ---
            
            *This summary is automatically generated every Friday. For questions or suggestions, please create an issue with the \`summary\` label.*`;
            
            // Create summary issue
            const summaryTitle = `📊 Weekly Summary - ${new Date().toLocaleDateString()}`;
            
            // Check if summary issue already exists for this week
            const { data: existingSummaries } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['summary']
            });
            
            const thisWeekSummary = existingSummaries.find(s => 
              s.title.includes(new Date().toLocaleDateString('en-US', { month: 'short', day: 'numeric' }))
            );
            
            if (thisWeekSummary) {
              // Update existing summary
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: thisWeekSummary.number,
                title: summaryTitle,
                body: summary
              });
            } else {
              // Create new summary
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: summaryTitle,
                body: summary,
                labels: ['summary', 'analytics', 'community']
              });
            }
            
            function generateCommunityHighlights(contributors, recentPRs, recentIssues) {
              const highlights = [];
              
              // Top contributors
              if (contributors.length > 0) {
                const topContributors = contributors.slice(0, 3);
                highlights.push(`**Top Contributors:** ${topContributors.map(c => `@${c.login}`).join(', ')}`);
              }
              
              // Recent activity
              if (recentPRs.length > 0) {
                highlights.push(`**Active Development:** ${recentPRs.length} new PRs this week`);
              }
              
              if (recentIssues.length > 0) {
                highlights.push(`**Community Engagement:** ${recentIssues.length} new issues this week`);
              }
              
              // Community growth
              if (contributors.length > 5) {
                highlights.push(`**Growing Community:** ${contributors.length} total contributors`);
              }
              
              return highlights.length > 0 ? highlights.join('\n') : '- **Building Community:** Early stages of community development';
            }
            
            function generateNextWeekFocus(openIssues, openPRs, recentIssues) {
              const focus = [];
              
              if (openIssues > 10) {
                focus.push('- **Issue Triage:** Review and prioritize open issues');
              }
              
              if (openPRs > 5) {
                focus.push('- **PR Reviews:** Review and merge pending pull requests');
              }
              
              if (recentIssues.length > 0) {
                focus.push('- **Community Support:** Respond to new community questions and feedback');
              }
              
              focus.push('- **Documentation:** Continue improving project documentation');
              focus.push('- **Educational Content:** Enhance learning materials');
              
              return focus.join('\n');
            }
            
            function generateAchievements(repo, contributors, mergedPRs, totalIssues) {
              const achievements = [];
              
              if (repo.stargazers_count > 10) {
                achievements.push('- **Popular Project:** Gaining recognition in the community');
              }
              
              if (contributors.length > 3) {
                achievements.push('- **Collaborative Success:** Multiple contributors working together');
              }
              
              if (mergedPRs > 5) {
                achievements.push('- **Active Development:** Regular contributions and improvements');
              }
              
              if (totalIssues > 20) {
                achievements.push('- **Community Engagement:** Active community participation');
              }
              
              achievements.push('- **Educational Excellence:** High-quality learning resources');
              achievements.push('- **Code Quality:** Maintaining high coding standards');
              
              return achievements.join('\n');
            }
